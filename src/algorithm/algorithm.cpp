#include <algorithm>

#include "algorithm.hpp"

float blackPawnValues[8][8] = {
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 0.9, 0.9, 0.9, 1.1, 1.2, 1.2,
    1.0, 1.0, 1.1, 1.3, 1.3, 1.1, 1.0, 1.0,
    1.0, 1.0, 1.1, 1.4, 1.4, 1.1, 1.0, 1.0,
    1.0, 1.0, 1.1, 1.2, 1.2, 1.1, 1.0, 1.0,
    1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1,
    1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
};

float blackKnightValues[8][8] = {
    2.6, 2.7, 2.8, 2.8, 2.8, 2.8, 2.7, 2.6,
    2.7, 2.8, 2.9, 3.1, 3.1, 2.9, 2.8, 2.7,
    2.9, 2.9, 3.2, 3.0, 3.0, 3.2, 2.9, 2.8,
    2.9, 2.9, 3.1, 3.1, 3.1, 3.1, 2.9, 2.8,
    2.9, 2.9, 3.0, 3.0, 3.0, 3.0, 2.9, 2.8,
    2.9, 2.9, 3.0, 3.0, 3.0, 3.0, 2.9, 2.8,
    2.7, 2.8, 3.0, 3.0, 3.0, 3.0, 2.8, 2.7,
    2.6, 2.7, 2.8, 2.8, 2.8, 2.8, 2.7, 2.6
};

float blackBishopValues[8][8] = {
    2.9, 2.9, 2.8, 2.8, 2.8, 2.8, 2.9, 2.9,
    3.0, 3.4, 3.0, 3.0, 3.0, 3.0, 3.4, 3.0,
    3.0, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.0,
    3.0, 3.2, 3.3, 3.2, 3.2, 3.3, 3.2, 3.0,
    3.0, 3.3, 3.2, 3.2, 3.2, 3.2, 3.3, 3.0,
    3.0, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.0,
    3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0,
    2.9, 2.9, 2.8, 2.8, 2.8, 2.8, 2.9, 2.9
};

float blackRookValues[8][8] = {
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
};

float blackQueenValues[8][8] = {
    9.0, 9.0, 8.9, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
};

float blackKingValues[8][8] = {
    100.0, 100.0, 100.3, 100.0, 100.0, 100.0, 100.5, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
};

float whitePawnValues[8][8] = {
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2,
    1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1,
    1.0, 1.0, 1.1, 1.2, 1.2, 1.1, 1.0, 1.0,
    1.0, 1.0, 1.1, 1.4, 1.4, 1.1, 1.0, 1.0,
    1.0, 1.0, 1.1, 1.3, 1.3, 1.1, 1.0, 1.0,
    1.0, 1.0, 0.9, 0.9, 0.9, 1.1, 1.2, 1.2,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
};

float whiteKnightValues[8][8] = {
    2.6, 2.7, 2.8, 2.8, 2.8, 2.8, 2.7, 2.6,
    2.7, 2.8, 3.0, 3.0, 3.0, 3.0, 2.8, 2.7,
    2.9, 2.9, 3.0, 3.0, 3.0, 3.0, 2.9, 2.8,
    2.9, 2.9, 3.0, 3.0, 3.0, 3.0, 2.9, 2.8,
    2.9, 2.9, 3.1, 3.1, 3.1, 3.1, 2.9, 2.8,
    2.9, 2.9, 3.2, 3.0, 3.0, 3.2, 2.9, 2.8,
    2.7, 2.8, 2.9, 3.1, 3.1, 2.9, 2.8, 2.7,
    2.6, 2.7, 2.8, 2.8, 2.8, 2.8, 2.7, 2.6
};

float whiteBishopValues[8][8] = {
    2.9, 2.9, 2.8, 2.8, 2.8, 2.8, 2.9, 2.9,
    3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0,
    3.0, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.0,
    3.0, 3.3, 3.2, 3.2, 3.2, 3.2, 3.3, 3.0,
    3.0, 3.2, 3.3, 3.2, 3.2, 3.3, 3.2, 3.0,
    3.0, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.0,
    3.0, 3.4, 3.0, 3.0, 3.0, 3.0, 3.4, 3.0,
    2.9, 2.9, 2.8, 2.8, 2.8, 2.8, 2.9, 2.9
};

float whiteRookValues[8][8] = {
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
};

float whiteQueenValues[8][8] = {
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0,
    9.0, 8.9, 8.9, 9.0, 8.9, 9.0, 9.0, 9.0,
};

float whiteKingValues[8][8] = {
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    100.0, 100.0, 100.3, 100.0, 100.0, 100.0, 100.5, 100.0,
};

float evaluation( ChessBoard board ){
    float suma = 0;

    for (int j = 0; j < 8; j++)
    {
        for (int i = 0; i < 8; i++)
        {
            if (board.board[i][j].color == WHITE)
            {
                switch (board.board[i][j].type)
                {
                case PAWN: suma += whitePawnValues[i][j]; break;
                case KNIGHT: suma += whiteKnightValues[i][j]; break;
                case BISHOP: suma += whiteBishopValues[i][j]; break;
                case ROOK: suma += whiteRookValues[i][j]; break;
                case QUEEN: suma += whiteQueenValues[i][j]; break;
                case KING: suma += whiteKingValues[i][j]; break;
                default: break;
                }

            } else if (board.board[i][j].color == BLACK)
            {
                switch (board.board[i][j].type)
                {
                case PAWN: suma -= blackPawnValues[i][j]; break;
                case KNIGHT: suma -= blackKnightValues[i][j]; break;
                case BISHOP: suma -= blackBishopValues[i][j]; break;
                case ROOK: suma -= blackRookValues[i][j]; break;
                case QUEEN: suma -= blackQueenValues[i][j]; break;
                case KING: suma -= blackKingValues[i][j]; break;
                default: break;
                }
            }
        }
    }

    return suma;
}

float minimax( ChessBoard node, int depth, float a, float b ){
    if (depth == 0)
    {
        return evaluation(node);
    }

    if (node.whiteOnMove == true)
    {
        std::vector<ChessBoard> nodes = possibleMoves(node);
        if (nodes.size() == 0)
        {
            if (whiteKingCheck(node))
            {
                return -1000 - depth;
            } else {
                return 0;
            }
        }

        float value = -2000;
        for (long long unsigned int i = 0; i < nodes.size(); i++)
        {
            value = std::max(value, minimax(nodes[i], depth - 1, a, b));
            if (value > b)
            {
                break;
            }
            a = std::max(a, value);
        }

        return value;
    } else {
        std::vector<ChessBoard> nodes = possibleMoves(node);
        if (nodes.size() == 0)
        {
            if (blackKingCheck(node))
            {
                return 1000 + depth;
            } else {
                return 0;
            }
        }

        float value = 2000;
        for (long long unsigned int i = 0; i < nodes.size(); i++)
        {
            value = std::min(value, minimax(nodes[i], depth - 1, a, b));
            if (value < a)
            {
                break;
            }
            b = std::min(b, value);
        }

        return value;
    }
}